/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import misc.Keyfile;
import java.security.SecureRandom;
import java.security.NoSuchAlgorithmException;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

/**
 *
 * @author dxtr
 */
public class NewMasterKey extends javax.swing.JDialog {
    private char[] key;
    private Keyfile keyfile;
    
    /**
     * Creates new form NewMasterKey
     */
    public NewMasterKey(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        keyfile = new Keyfile();
    }
    
    public char[] getKey() { return key; }
    public Keyfile getKeyFile() { return keyfile; }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        header = new javax.swing.JLabel();
        instructionLabel = new javax.swing.JLabel();
        keyPanel = new javax.swing.JPanel();
        passwordCheckBox = new javax.swing.JCheckBox();
        keyFileCheckBox = new javax.swing.JCheckBox();
        passwordField = new javax.swing.JPasswordField();
        browseKeyFile = new javax.swing.JButton();
        toggleVisible = new javax.swing.JButton();
        keyFilePath = new javax.swing.JComboBox();
        generateKeyFile = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(585, 300));
        setResizable(false);

        headerPanel.setBackground(new java.awt.Color(51, 153, 255));

        header.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        header.setText("New Master Key");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addContainerGap())
        );

        instructionLabel.setText("Enter a password and/or a key file");

        keyPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        passwordCheckBox.setSelected(true);
        passwordCheckBox.setText("Password:");
        passwordCheckBox.setActionCommand("Password");
        passwordCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                passwordCheckBoxStateChanged(evt);
            }
        });

        keyFileCheckBox.setText("Key file");
        keyFileCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                keyFileCheckBoxStateChanged(evt);
            }
        });

        browseKeyFile.setText("Browse");
        browseKeyFile.setEnabled(false);
        browseKeyFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                browseKeyFileMousePressed(evt);
            }
        });

        toggleVisible.setText("Visible");
        toggleVisible.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                toggleVisibleMousePressed(evt);
            }
        });

        keyFilePath.setEditable(true);
        keyFilePath.setEnabled(false);

        generateKeyFile.setText("Generate Key File");
        generateKeyFile.setEnabled(false);
        generateKeyFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                generateKeyFileMousePressed(evt);
            }
        });

        javax.swing.GroupLayout keyPanelLayout = new javax.swing.GroupLayout(keyPanel);
        keyPanel.setLayout(keyPanelLayout);
        keyPanelLayout.setHorizontalGroup(
            keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keyPanelLayout.createSequentialGroup()
                        .addComponent(passwordCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(toggleVisible))
                    .addGroup(keyPanelLayout.createSequentialGroup()
                        .addComponent(keyFileCheckBox)
                        .addGap(18, 18, 18)
                        .addGroup(keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(keyPanelLayout.createSequentialGroup()
                                .addComponent(generateKeyFile)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(keyPanelLayout.createSequentialGroup()
                                .addComponent(keyFilePath, 0, 393, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseKeyFile)))))
                .addContainerGap())
        );
        keyPanelLayout.setVerticalGroup(
            keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordCheckBox)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toggleVisible))
                .addGap(18, 18, 18)
                .addGroup(keyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyFileCheckBox)
                    .addComponent(browseKeyFile)
                    .addComponent(keyFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(generateKeyFile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        passwordCheckBox.getAccessibleContext().setAccessibleName("Password");

        cancelButton.setText("Cancel");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cancelButtonMousePressed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                okButtonMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(instructionLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instructionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMousePressed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonMousePressed

    private void okButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMousePressed
        if (!passwordCheckBox.isSelected() && !keyFileCheckBox.isSelected()) return;
        
        if (passwordCheckBox.isSelected()) {
            if (passwordField.getPassword().length > 0) {
                key = passwordField.getPassword();
            } else {
                /* TODO: Show a warning */
                System.out.println("Password isn't entered");
                return;
            }
        }
        
        if (keyFileCheckBox.isSelected()) {
            if (this.keyFilePath.getSelectedItem() != null) {
                this.keyfile.setPath(this.keyFilePath.getSelectedItem().toString());
                /* TODO: Read the data here? */
            } else {
                /* TODO: Show a warning */
                System.out.println("No key file specified");
                return;
            }
        }
        
        this.setVisible(false);
    }//GEN-LAST:event_okButtonMousePressed

    private void keyFileCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_keyFileCheckBoxStateChanged
        if (keyFileCheckBox.isSelected()) {
            keyFilePath.setEnabled(true);
            browseKeyFile.setEnabled(true);
            generateKeyFile.setEnabled(true);
        } else {
            keyFilePath.setEnabled(false);
            browseKeyFile.setEnabled(false);
            generateKeyFile.setEnabled(false);
        }
    }//GEN-LAST:event_keyFileCheckBoxStateChanged

    private void passwordCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_passwordCheckBoxStateChanged
        if (passwordCheckBox.isSelected()) {
            passwordField.setEnabled(true);
            toggleVisible.setEnabled(true);
        } else {
            passwordField.setEnabled(false);
            toggleVisible.setEnabled(false);
        }
    }//GEN-LAST:event_passwordCheckBoxStateChanged

    private void toggleVisibleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toggleVisibleMousePressed
        if (this.passwordField.getEchoChar() == '\u25cf') passwordField.setEchoChar((char)0);
        else passwordField.setEchoChar('\u25cf');
    }//GEN-LAST:event_toggleVisibleMousePressed

    private void browseKeyFileMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseKeyFileMousePressed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setDialogTitle("Select a Key File");
        int retVal = fileChooser.showOpenDialog(this);
        if (retVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            keyFilePath.insertItemAt(fileChooser.getSelectedFile().getAbsolutePath(),0);
            keyFilePath.setSelectedIndex(0);
        }
    }//GEN-LAST:event_browseKeyFileMousePressed

    private void generateKeyFileMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generateKeyFileMousePressed
        // TODO generate random data
        SecureRandom secrand;
        JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setDialogTitle("Create key file");
        File f;
        FileOutputStream outPut;
        byte[] randBytes = new byte[512];
        int retVal;
        boolean createFile;
        
        try {
            secrand = SecureRandom.getInstance("SHA1PRNG");
            secrand.nextBytes(randBytes);
            
            retVal = fileChooser.showSaveDialog(this);
            if (retVal != JFileChooser.APPROVE_OPTION) { return; }
            
            f = fileChooser.getSelectedFile();
            createFile = f.createNewFile();
            
            outPut = new FileOutputStream(f);
            outPut.write(randBytes);
            outPut.close();
            
            keyFilePath.insertItemAt(fileChooser.getSelectedFile().getAbsolutePath(),0);
            keyFilePath.setSelectedIndex(0);
        } catch (NoSuchAlgorithmException e) {
            // TODO: Log and show error
            System.out.println("No such algorithm, SHA1PRNG");
        } catch (FileNotFoundException e) {
            // TODO: Log and show error
            System.out.println("File does not exist");
        } catch (IOException e) {
            // TODO: Log and show error
            System.out.println("Caught IOException: " + e.getMessage());
        }
    }//GEN-LAST:event_generateKeyFileMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseKeyFile;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton generateKeyFile;
    private javax.swing.JLabel header;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JCheckBox keyFileCheckBox;
    private javax.swing.JComboBox keyFilePath;
    private javax.swing.JPanel keyPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox passwordCheckBox;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton toggleVisible;
    // End of variables declaration//GEN-END:variables
}
